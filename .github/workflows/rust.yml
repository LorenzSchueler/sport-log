name: Rust

permissions:
  contents: read
  checks: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  format:
    name: format
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: install rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: cargo fmt
      run: cargo fmt --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: cargo clippy
      run: cargo clippy --all-features
    
  doc:
    name: doc
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: install rust
      uses: dtolnay/rust-toolchain@stable
    - name: load cache
      uses: Swatinem/rust-cache@v2
    - name: cargo doc
      env:
        RUSTDOCFLAGS: "-D warnings" 
      run: cargo doc --no-deps --all-features

  build:
    name: check
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: install rust
      uses: dtolnay/rust-toolchain@stable
    - name: load cache
      uses: Swatinem/rust-cache@v2
    - name: cargo check
      # build every crate on its own to make sure enabled features from other crates do not mask missing dependencies
      run: cargo check --manifest-path sport-log-action-provider-sportstracker/Cargo.toml &&
           cargo check --manifest-path sport-log-action-provider-wodify-login/Cargo.toml &&
           cargo check --manifest-path sport-log-action-provider-wodify-wod/Cargo.toml &&
           cargo check --manifest-path sport-log-ap-utils/Cargo.toml &&
           cargo check --manifest-path sport-log-scheduler/Cargo.toml &&
           cargo check --manifest-path sport-log-server/Cargo.toml &&
           cargo check --manifest-path sport-log-types/Cargo.toml &&
           cargo check --manifest-path sport-log-derive/Cargo.toml

  test:
    name: test
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: sport_log
      POSTGRES_PASSWORD: test-passwd
      POSTGRES_USER: sport_admin
      ADMIN_PASSWORD_HASH: "$argon2id$v=19$m=4096,t=3,p=1$jfQMFwbuWJW6kYF3K6Opxg$8zmHSEMYeXuxhxl7HNv8/zsgSx/LWm6Iy1EciOBJdQM" # = "admin-passwd"

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: sport_log
          POSTGRES_PASSWORD: test-passwd
          POSTGRES_USER: sport_admin
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: env
      run: echo "DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost/$POSTGRES_DB" >> $GITHUB_ENV
    - name: checkout
      uses: actions/checkout@v4
    - name: install rust
      uses: dtolnay/rust-toolchain@stable
    - name: load cache
      uses: Swatinem/rust-cache@v2
    - name: install postgresql
      run: |
        sudo apt-get update -y
        sudo apt-get install libpq-dev postgresql-client-common postgresql
    - name: install diesel_cli
      run: cargo install diesel_cli --no-default-features --features postgres
    - name: setup database
      working-directory: sport-log-types
      run: |
        diesel database setup
        patch src/schema.rs src/schema.patch
      # diesel database setup --locked-schema TODO
    - name: create sport-log-server.toml file
      working-directory: sport-log-server
      run: |
        echo "
        admin_password = \"$ADMIN_PASSWORD_HASH\"
        user_self_registration = true
        ap_self_registration = true
        database_url = \"$DATABASE_URL\"
        release_address = \"0.0.0.0:8000\"
        debug_address = \"0.0.0.0:8001\"
        " > sport-log-server.toml
    - name: cargo test
      run: cargo test

  test-end-to-end:
    name: test-end-to-end
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: sport_log
      POSTGRES_PASSWORD: sport_admin_passwd
      POSTGRES_USER: sport_admin
      USERNAME: ScreenshotUser
      PASSWORD: ScreenshotPassword0
      AP_USERNAME: wodify-login
      AP_PASSWORD: Wodify-Login-Password1
      ADMIN_PASSWORD: admin-passwd
      ADMIN_PASSWORD_HASH: "$argon2id$v=19$m=4096,t=3,p=1$jfQMFwbuWJW6kYF3K6Opxg$8zmHSEMYeXuxhxl7HNv8/zsgSx/LWm6Iy1EciOBJdQM"
      BASE_URL: http://localhost:8001

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: sport_log
          POSTGRES_PASSWORD: sport_admin_passwd
          POSTGRES_USER: sport_admin
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: env
      run: echo "DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost/$POSTGRES_DB" >> $GITHUB_ENV
    - name: checkout
      uses: actions/checkout@v4
    - name: install rust
      uses: dtolnay/rust-toolchain@stable
    - name: load cache
      uses: Swatinem/rust-cache@v2
    - name: install postgresql
      run: |
        sudo apt-get update -y
        sudo apt-get install libpq-dev postgresql-client-common postgresql
    - name: install diesel_cli
      run: cargo install diesel_cli --no-default-features --features postgres
    - name: setup database
      working-directory: sport-log-types
      run: |
        diesel database setup
        patch src/schema.rs src/schema.patch
      # diesel database setup --locked-schema TODO
    - name: create sport-log-server.toml file
      working-directory: sport-log-server
      run: |
        echo "
        admin_password = \"$ADMIN_PASSWORD_HASH\"
        user_self_registration = true
        ap_self_registration = true
        database_url = \"postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost/$POSTGRES_DB\"
        release_address = \"0.0.0.0:8000\"
        debug_address = \"0.0.0.0:8001\"
        " > sport-log-server.toml
    - name: run server
      working-directory: sport-log-server
      run: |
        set -e

        cargo build
        cargo run &
        sleep 1
    - name: test end-to-end
      working-directory: test-data
      run: |
        set -e

        echo -e "GET $BASE_URL/version"
        curl -f "$BASE_URL/version"

        # adm routes
        echo -e "\n\nPOST $BASE_URL/v0.3/adm/platform"
        curl -f -u admin:$ADMIN_PASSWORD -X POST "$BASE_URL/v0.3/adm/platform" \
            -H 'Content-Type: application/json' \
            -d @platform.json
        echo -e "\n\nGET $BASE_URL/v0.3/adm/platform"
        curl -f -u admin:$ADMIN_PASSWORD "$BASE_URL/v0.3/adm/platform" \
            -H 'Accept: application/json'
        echo -e "\n\nPUT $BASE_URL/v0.3/adm/platform"
        curl -f -u admin:$ADMIN_PASSWORD -X PUT "$BASE_URL/v0.3/adm/platform" \
            -H 'Content-Type: application/json' \
            -d @platform.json

        echo -e "\n\nPOST $BASE_URL/v0.3/adm/action_provider"
        curl -f -u admin:$ADMIN_PASSWORD -X POST "$BASE_URL/v0.3/adm/action_provider" \
            -H 'Content-Type: application/json' \
            -d @action_provider.json
        echo -e "\n\nGET $BASE_URL/v0.3/adm/action_provider"
        curl -f -u admin:$ADMIN_PASSWORD "$BASE_URL/v0.3/adm/action_provider" \
            -H 'Accept: application/json'

        # create action so that action events can be created
        echo -e "\n\nPOST $BASE_URL/v0.3/ap/action"
        curl -f -u admin:$ADMIN_PASSWORD -X POST "$BASE_URL/v0.3/ap/action" \
            -H 'Content-Type: application/json' \
            -H 'id: 2432838314050000638' \
            -d @action.json

        echo -e "\n\nPOST $BASE_URL/v0.3/adm/user"
        curl -f -u admin:$ADMIN_PASSWORD -X POST "$BASE_URL/v0.3/adm/user" \
            -H 'Content-Type: application/json' \
            -d @user.json

        echo -e "\n\nPOST $BASE_URL/v0.3/adm/action_event"
        curl -f -u admin:$ADMIN_PASSWORD -X POST "$BASE_URL/v0.3/adm/action_event" \
            -H 'Content-Type: application/json' \
            -d @action_event.json
        echo -e "\n\nPUT $BASE_URL/v0.3/adm/action_event"
        curl -f -u admin:$ADMIN_PASSWORD -X PUT "$BASE_URL/v0.3/adm/action_event" \
            -H 'Content-Type: application/json' \
            -d @action_event.json
        echo -e "\n\nDELETE $BASE_URL/v0.3/adm/action_event"
        curl -f -u admin:$ADMIN_PASSWORD -X DELETE "$BASE_URL/v0.3/adm/action_event" \
            -H 'Content-Type: application/json' \
            -d '[]'

        echo -e "\n\nGET $BASE_URL/v0.3/adm/creatable_action_rule"
        curl -f -u admin:$ADMIN_PASSWORD "$BASE_URL/v0.3/adm/creatable_action_rule" \
            -H 'Accept: application/json'
        echo -e "\n\nGET $BASE_URL/v0.3/adm/deletable_action_event"
        curl -f -u admin:$ADMIN_PASSWORD "$BASE_URL/v0.3/adm/deletable_action_event" \
            -H 'Accept: application/json'

        # delete platform (and cascading also actions, ...) so they can be created again
        echo -e "\n\nPUT $BASE_URL/v0.3/adm/platform"
        cat platform.json | sed "s/\"deleted\": false/\"deleted\": true/g" | \
        curl -f -u admin:$ADMIN_PASSWORD -X PUT "$BASE_URL/v0.3/adm/platform" \
            -H 'Content-Type: application/json' \
            -d @-

        # delete user so it can be created again
        echo -e "\n\nDELETE $BASE_URL/v0.3/user"
        curl -f -u admin:$ADMIN_PASSWORD -X DELETE "$BASE_URL/v0.3/user" \
            -H 'Content-Type: application/json' \
            -H 'id: 0'

        echo -e "\n\nDELETE $BASE_URL/v0.3/adm/garbage_collection?last_change=$(date --utc -d +1minute '+%Y-%m-%dT%H:%M:%SZ')"
        curl -f -u admin:$ADMIN_PASSWORD -X DELETE "$BASE_URL/v0.3/adm/garbage_collection?last_change=$(date --utc -d +1minute '+%Y-%m-%dT%H:%M:%SZ')"

        # ap routes
        # create platform and ap requires ap self auth
        entities=(platform action_provider)
        for entity in "${entities[@]}"; do
            echo -e "\n\nPOST $BASE_URL/v0.3/ap/$entity"
            curl -f -X POST "$BASE_URL/v0.3/ap/$entity" \
                -H 'Content-Type: application/json' \
                -d @$entity.json
            echo -e "\n\nGET $BASE_URL/v0.3/ap/$entity" \
            curl -f -u $AP_USERNAME:$AP_PASSWORD "$BASE_URL/v0.3/ap/$entity" \
                -H 'Accept: application/json'
        done

        echo -e "\n\nPOST $BASE_URL/v0.3/ap/action"
        curl -f -u $AP_USERNAME:$AP_PASSWORD -X POST "$BASE_URL/v0.3/ap/action" \
            -H 'Content-Type: application/json' \
            -d @action.json
        echo -e "\n\nGET $BASE_URL/v0.3/ap/action"
        curl -f -u $AP_USERNAME:$AP_PASSWORD "$BASE_URL/v0.3/ap/action" \
            -H 'Accept: application/json'

        echo -e "\n\nDELETE $BASE_URL/v0.3/ap/action_event"
        curl -f -u $AP_USERNAME:$AP_PASSWORD -X DELETE "$BASE_URL/v0.3/ap/action_event" \
            -H 'Content-Type: application/json' \
            -d '[]'

        echo -e "\n\nGET $BASE_URL/v0.3/ap/executable_action_event"
        curl -f -u $AP_USERNAME:$AP_PASSWORD "$BASE_URL/v0.3/ap/executable_action_event" \
            -H 'Accept: application/json'

        # user routes
        # create user requires user self auth
        echo -e "\n\nPOST $BASE_URL/v0.3/user"
        curl -f -X POST "$BASE_URL/v0.3/user" \
            -H 'Content-Type: application/json' \
            -d @user.json
        echo -e "\n\nGET $BASE_URL/v0.3/user"
        curl -f -u $USERNAME:$PASSWORD "$BASE_URL/v0.3/user" \
            -H 'Accept: application/json' 
        echo -e "\n\nPUT $BASE_URL/v0.3/user"
        curl -f -u $USERNAME:$PASSWORD -X PUT "$BASE_URL/v0.3/user" \
            -H 'Content-Type: application/json' \
            -d @user.json

        # get_app_info and download_app not tested

        echo -e "\n\nGET $BASE_URL/v0.3/account_data"
        curl -f -u $USERNAME:$PASSWORD "$BASE_URL/v0.3/account_data" \
            -H 'Accept: application/json' 
        
        entities=(movement diary strength_session strength_set metcon metcon_movement metcon_session route cardio_session platform_credential action_rule action_event)
        for entity in "${entities[@]}"; do
            echo -e "\n\nPOST $BASE_URL/v0.3/$entity"
            curl -f -u $USERNAME:$PASSWORD -X POST "$BASE_URL/v0.3/$entity" \
                -H 'Content-Type: application/json' \
                -d @$entity.json
            echo -e "\n\nGET $BASE_URL/v0.3/$entity"
            curl -f -u $USERNAME:$PASSWORD "$BASE_URL/v0.3/$entity" \
                -H 'Accept: application/json' 
            echo -e "\n\nPUT $BASE_URL/v0.3/$entity"
            curl -f -u $USERNAME:$PASSWORD -X PUT "$BASE_URL/v0.3/$entity" \
                -H 'Content-Type: application/json' \
                -d @$entity.json
        done

        echo -e "\n\nGET $BASE_URL/v0.3/platform"
        curl -f -u $USERNAME:$PASSWORD "$BASE_URL/v0.3/platform" \
            -H 'Accept: application/json' 
        echo -e "\n\nGET $BASE_URL/v0.3/action_provider"
        curl -f -u $USERNAME:$PASSWORD "$BASE_URL/v0.3/action_provider" \
            -H 'Accept: application/json' 
        echo -e "\n\nGET $BASE_URL/v0.3/action"
        curl -f -u $USERNAME:$PASSWORD "$BASE_URL/v0.3/action" \
            -H 'Accept: application/json' 
        echo -e "\n\nGET $BASE_URL/v0.3/eorm"
        curl -f -u $USERNAME:$PASSWORD "$BASE_URL/v0.3/eorm" \
            -H 'Accept: application/json' 

        echo -e "\n\nDELETE $BASE_URL/v0.3/user"
        curl -f -u $USERNAME:$PASSWORD -X DELETE "$BASE_URL/v0.3/user"

  deps:
    name: unused deps
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4
    - name: load cache
      uses: Swatinem/rust-cache@v2
    - name: install cargo-machete
      run: cargo install cargo-machete
    - name: cargo machete
      run: cargo machete
